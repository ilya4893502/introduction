package com.company;

import java.io.PrintWriter;

public class Main {

    // Введение в Spring REST.

    // На прошлых уроках мы делали http-запрос и в ответ на выдавалась html-страница (представление).
    // С помощью браузера мы заполняли формы и отправляли GET, PATCH, POST, DELETE запросы.
    // Все действия со Spring-приложением было через браузер.


    // Самый частый сценарий использования Spring Framework.

    // Чаще всего в Spring-приложении мы не реализуем представление и не взаимодействуем со Spring-приложением
    // с помощью браузера.

    // Самый частый сценарий - это бэкэнд. То есть Spring-приложение принимает http-запросы и в ответ отдает
    // не представления (html-страниц), а отдает просто данные, чаще всего в формате JSON.
    // И уже другие сервисы принимают эти данные Spring-приложения и показывают их пользователю. IOS, Android,
    // Python, Spring, JS приложения. Эти приложения сами отображают данные для пользователя.

    // Такие приложения, которые отдают данные в обиходе называются REST API (синонимы: RESTful API, сервис,
    // бэкэнд, API). То Spring-приложение, которое мы реализуем в этом блоке будет называться REST API.
    // Чаще всего формат данных - JSON, в котором отдаются данные.


    // Преимущества REST API.

    // Приложение (JS, IOS,     HTTP-запрос ->        Spring     HTTP-запрос ->     Python ML
    // Android, Python, Spring)  <- Данные (JSON)   приложение         <- JSON       сервис

    // - С помощью REST API мы можем связывать между собой разные компоненты (разные ЯП, разные фреймворки).
    // Нам без разницы какие технологии используются на сервисе, если он отдает нам данные в формате JSON.
    // JSON универсален для всех ЯП.

    // - К одному сервису могут обращаться сразу несколько сервисов. Один раз написали бэкэнд на Spring
    // Framework, фронтэнд приложения (JS, IOS, Android) будут обращаться к одному бэкэнд приложению за
    // данными.


    // REST API очень популярны.
    // Отчасти благодаря популярности микросервисной архитектуры приложений.

    // Стандартный подход к построению приложения - это монолитный подход.
    // Когда все приложения является одним сервисом (бизнес-логика, представление, БД). Это мы реализовывали
    // в предыдущих уроках.
    // Недостаток такого подхода в том, что его сложно изменять дополнять и масштабировать

    // Микросервисный подход - это когда большое (монолитное) приложение делят на небольшие, слабосвязные и
    // легко изменяемые приложения.
    // Эти автономные приложения называются микросервисами. Эти микросервисы общаются друг с другом с помощью
    // API (HTTP-запрос -> <- ответ данными).
    // Эти микросервисы могут быть на разных ЯП.


    // Микросервисы.

    // Можно изменять только один микросервис, а остальные не затрагивать. В отличие от монолитного
    // приложения, в котором при изменении чего-то одного затрагивается все приложение.

    // Разные микросервисы в одном приложении могут использовать разные ЯП и технологии.

    // Микросервисы могут быть распределенными, то есть работать на множестве серверов. Это позволяет нам
    // лучше масштабироваться. Так как мы можем докупать сервера при необходимости.

    // Сколько используется микросервисов столько должно использоваться и API.

}
